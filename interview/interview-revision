---Prometheus&Grafana---
Prometheus: Prometheus is a monitoring and alerting stack, it works on TSDB(timeseries database), Prometheus pulls the metrics
promQL: The dedicated querying language used by Prometheus to perform calculations
grafana: grafana provides the meaningfull data of prometheus to be visualisation
Service Discovery: With the help of Service discovery the services are identified which are need to scraped.
nodeExporter: it is use to collect the metrics of the system
Federation: Federation enables multiple Prometheus servers to work together in a hierarchical manner
Chunks: Chunks are compressed blocks of data that contain a range of samples for a specific time-series.
WAL (Write-Ahead Log): The WAL captures incoming samples before they are written to the main storage, providing a reliable mechanism to recover data in the event of a crash or restart.
https://devopscube.com/prometheus-architecture/


------------kubernetes----------
kube-proxy: maintaining service rules for service to pod mapping, allowing communication to & from kubernetes cluster, kube-proxy acts as a L3 & L4 layer, loadbalancer
CNI: When a pod is created, the CNI plugin assigns an IP address to the pod and configures necessary routes and network policies. The Kubernetes kubelet uses CNI plugins to handle networking for each pod.

------------other---------------
TCP AND UDP: tcp and udp are used for transmission of data over the internet, while both belongs to transport layer of the osi model
1) TCP: tcp is a connection orinted protocall , it ensures the data packets are delivered in the correct order and with out error, it is slower data transmission
2) UDP: udp is a connection less protocall, it simply sends the data packets to the destination without verfiying, it is faster that tcp, commonly used for fast and low-latency connections like online gaming & video steming


--------------AWS---------------
ALB: 
Operates at Layer 7 (Application Layer) of the OSI model. It routes traffic based on application-level information
Supports advanced routing features like host-based and path-based routing
used Ideal for HTTP/HTTPS applications, web applications, microservices architectures
Supports HTTP, HTTPS, and WebSocket protocols
Can handle a high volume of application-layer traffic and supports autoscaling based on application demand, but typically has slightly higher latency due to Layer 7 processing.
Offers support for security features like AWS Web Application Firewall (WAF) and user authentication via Amazon Cognito.
NLB:
Operates at Layer 4 (Transport Layer) of the OSI model. It routes traffic based on IP protocol data
Suitable for TCP/UDP applications, high-performance, low-latency applications
Supports static IPs and Elastic IPs, allowing each Availability Zone to have a static IP that doesn’t change, which is advantageous for whitelisting IPs or using fixed IPs.
Does not support WAF

• Example: if CIDR block 10.0.0.0/24, then reserved IP addresses are: 
        • 10.0.0.0 – Network Address
        • 10.0.0.1 – reserved by AWS for the VPC router
        • 10.0.0.2 – reserved by AWS for mapping to Amazon-provided DNS
        • 10.0.0.3 – reserved by AWS for future use
        • 10.0.0.255 – Network Broadcast Address.AWS does not support broadcast in aVPC, therefore the address is reserved
    
S3 Storage Classes: 
        • Amazon S3 Standard - General Purpose
        • Amazon S3 Standard-Infrequent Access (IA) 
        • Amazon S3 Glacier Instant Retrieval
        • Amazon S3 Glacier Flexible Retrieval
        • Amazon S3 Glacier Deep Archive:
        • Amazon S3 Intelligent Tiering
eks:
Kubernetes-based, open-source.
Multi-cloud compatible.
Advanced Kubernetes networking.
Higher learning curve; more customizable.
Extra control plane cost.

ecs:
AWS-native, simpler, proprietary.
 Best within AWS ecosystem.
Simple AWS VPC integration.
Easier to use; less customization.
No control plane cost; only pay for compute.
Simple, AWS-integrated applications.

complete trafic flow:
1)External request hits Nginx Ingress Controller
  Client → LoadBalancer → Nginx Ingress Pod

2)DNS Resolution
  Nginx Pod → CoreDNS lookup for backend service
  CoreDNS → Returns service cluster IP

3)Service Access
  Nginx → Service Cluster IP
  kube-proxy rules → Redirect to Pod IP
  CNI → Routes packet to correct node/pod

----
External Traffic → Nginx Ingress Controller Pod
↓
Nginx reads Ingress rules
↓
Forwards to appropriate Service (using kube-proxy)
↓
Service forwards to Pod (using iptables/IPVS rules)
↓
Pod receives traffic


Would you like me to elaborate on any specific component or explain a particular traffic flow scenario in more detail?

-------------script-------------
shell: It is an interface between user and kernel.
