mis
===========
Physical Memory (RAM) is the actual physical hardware that stores data and program instructions that the CPU needs quickly.
Swap Memory is a space on the hard drive or SSD that the OS uses when the physical RAM is full.

ports
=========



=================================
$ find /path/to/search -type f -size +100M ==> to get 100mb files
-Ps ux command user for find status of process.
-Free command is useful for checking memory status.
-To debug a shell script we execute the script with the “-x” or “-nv”  option.
-$! Shows process id of the process that recently went into background 
-$$  gives the process id of the currently executing process
-“finger” command shows all information of users.
-Crontab stands for cron table because it uses the job scheduler cron to execute tasks. The crontab is a list of commands that you want to run on a regular schedule, and also the name of the command used to manage that list. 
-to open in readonly mode vi –R <Filename>
-uptime 
-ssh username@serverIP -p sshport 
-mysql –S serverName –U username –P password
-set the default permission to all users on every file which is created in the current shell umask 777
-insert a line “ABCD” at every 50th line of a file sed  '50i\ABCD' filename 
-find the total disk space used by a specific user du -s /home/username 
-How to print the login names of all users on a system /etc/shadow file has all the users listed.  awk –F ':' '{print $1}' /etc/shadow|uniq –u
-tar -czvf my_archive.tar test1.txt test2.txt test3.txt ==> to create the tar file
-tar -xvf my_archive.tar ==> to extract the tar file
-zip <file_name> ==> to zip the file
-unzip <file_name> ==> to unzip the file

$ The Linux boot process involves several steps:
BIOS/UEFI: When the system is powered on, BIOS/UEFI initializes hardware and loads the bootloader.
Bootloader: The bootloader (like GRUB) is loaded, which presents a menu and loads the kernel.
Kernel Initialization: The kernel initializes the system, sets up memory management, and detects hardware.
Init Process: The kernel starts the init process (often systemd), which initializes user-space services.
Runlevel Services: systemd or the init system starts the configured services based on the defined runlevel.

$ What are inodes, and how do they relate to file storage in Linux?
An inode is a data structure on a filesystem that stores information about a file or directory, including its size, owner, permissions, and pointers to the data blocks on disk. Each file has a unique inode number, allowing the filesystem to access it efficiently.

$How do permissions work in Linux? Explain how to set and manage permissions with chmod, chown, and chgrp?
Linux uses a permission model consisting of three types (read, write, execute) for three categories (owner, group, others).
chmod: Changes the permissions of a file or directory. E.g., chmod 755 filename sets read, write, and execute for the owner, and read and execute for group and others.
chown: Changes the owner of a file. E.g., chown user:group filename.
chgrp: Changes the group associated with a file. E.g., chgrp groupname filename.

$ How do you manage log files in Linux? Explain how you would handle log rotation.
Use logrotate for managing log files. It automatically rotates, compresses, and removes old log files based on configurations in /etc/logrotate.conf or /etc/logrotate.d/. You can define how often logs are rotated and how many backups to keep.

$What is iptables, and how do you configure basic firewall rules?
iptables is a user-space utility for configuring the Linux kernel firewall. Basic commands include:
To allow traffic: iptables -A INPUT -p tcp --dport 22 -j ACCEPT (allows SSH).
To deny traffic: iptables -A INPUT -j DROP (blocks all other traffic).

$ How do you handle user access management on Linux servers? Explain the role of /etc/passwd and /etc/shadow.
User management is done via commands like useradd, usermod, and userdel.
/etc/passwd: Contains user account information, including username, user ID, group ID, home directory, and shell.
/etc/shadow: Contains hashed passwords and account expiration details, accessible only by privileged users for security.

$ What is cron, and how do you schedule jobs with it?
cron is a time-based job scheduler in Unix-like operating systems. Jobs are defined in a crontab file (crontab -e), where you can specify the timing and commands to run, like 0 * * * * /path/to/script.sh to run a script every hour.

$ Troubleshooting High CPU Usage:
top -c                    # Real-time process view
htop                      # Interactive process viewer
ps aux | grep [process]   # Find specific process
pidstat 1                 # CPU statistics per process
sar -u 1 10              # CPU usage every 1 second, 10 times
$ Network Troubleshooting:
# Check connections
netstat -tuln          # Open ports
ss -tuln              # Alternative to netstat
lsof -i               # List open files/ports

# Network performance
iftop                 # Network bandwidth
tcpdump -i eth0       # Packet capture
ping -c 4 hostname    # Basic connectivity
traceroute hostname   # Route tracing
$ Shell Scripting:

"Write a script to find and delete files older than 30 days"
"How would you automate system backups?"
#!/bin/bash
# Simple backup script
BACKUP_DIR="/backup"
SOURCE_DIR="/data"
DATE=$(date +%Y%m%d)
# Create backup directory
mkdir -p $BACKUP_DIR/$DATE
# Create backup
tar -czf $BACKUP_DIR/$DATE/backup.tar.gz $SOURCE_DIR
# Remove backups older than 30 days
find $BACKUP_DIR/* -mtime +30 -exec rm -rf {} \;
# Log backup completion
echo "Backup completed on $(date)" >> /var/log/backup.log

$ fstrim ==> discards unused blocks from a mounted filesystem
