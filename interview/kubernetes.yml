———————————————————————————————————————————————————————————
Kubernetes
———————————————————————————————————————————————————————————- ==>
ServiceAccount: Identity for processes (pods) to interact with the API.
Role: Defines permissions in a specific namespace.
ClusterRole: Defines cluster-wide permissions.
RoleBinding: Grants a Role to a user or service account in a namespace.
ClusterRoleBinding: Grants a ClusterRole to a user or service account across the entire cluster.

Admission Webhook: An Admission Webhook in Kubernetes is a mechanism that intercepts API requests (like creating or updating resources) before they are persisted in the cluster. There are two types:

Mutating Webhooks: Modify the request (e.g., add labels, sidecars, or default values).
Validating Webhooks: Validate the request and approve or reject it based on custom rules.
Kubernetes Operator: Operators are software extensions that use custom resources to manage applications and their components
K8s Operators are controllers for packaging, managing, and deploying applications on Kubernetes.

StatefulSets:
* StatefulSets are used for managing stateful applications, where each pod in the set has a unique, persistent identity.
* They are commonly used for applications that require stable network identities or persistent storage, such as databases.
* StatefulSets provide guarantees about the ordering and uniqueness of pods, making it easier to manage stateful applications.

Deployments:
* Deployments are used for managing stateless applications, where each pod is interchangeable and can be replaced at any time.
* They are suitable for applications that don't store persistent data locally and can scale horizontally by adding or removing replicas.
=================================
---
apiVersion: v1
kind: Namespace
metadata:
  name: namespace-name
  labels:
    name: namespace-name

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: application-name-deployment
  namespace: namespace-name
  labels:
    app: application-name
spec:
  replicas: instancesPlaceholder
  selector:
    matchLabels:
      app: application-name
  strategy:
    rollingUpdate:
      maxSurge: instancesPlaceholder
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: application-name
    spec:
      containers:
        - name: application-name
          image: aws-account-id.dkr.ecr.ap-south-1.amazonaws.com/application-name:aws-ecr-image-tag
          ports:
            - name: user-port
              containerPort: portPlaceholder
          livenessProbe:
            httpGet:
              path: /healthCheck
              port: portPlaceholder
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 15
          readinessProbe:
            httpGet:
              path: /healthCheck
              port: portPlaceholder
            initialDelaySeconds: 30
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 24
          resources:
            requests:
              memory: memPlaceholder
              cpu: cpuPlaceholder
            limits:
              memory: memLimitPlaceholder
              cpu: cpuLimitPlaceholder
          env:
            - name: DD_API_KEY
              value: "e8ea279c02faf5aff0f964807bca0edd"
            - name: DD_APM_ENABLED
              value: "true"
            - name: DD_DOGSTATSD_TAGS
              value: "env:prod"
            - name: DD_ENV
              value: "prod"
            - name: DD_EXPVAR_PORT
              value: "3000"
            - name: DD_PROCESS_AGENT_ENABLED
              value: "true"
            - name: DD_SERVICE
              value: "prod_env"
            - name: DD_SYSTEM_PROBE_ENABLED
              value: "true"
            - name: DD_SYSTEM_PROBE_EXTERNAL
              value: "true"
            - name: ECS_FARGATE
              value: "true"
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  name: common-service-secret
                  key: VAULT_TOKEN
            - name: ACTIVE_PROFILE
              valueFrom:
                secretKeyRef:
                  name: common-service-secret
                  key: ACTIVE_PROFILE
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  name: common-service-secret
                  key: VAULT_URL


---
apiVersion: v1
kind: Service
metadata:
  name: application-name-service
  namespace: namespace-name
  annotations:
    prometheus.io/path: "/actuator/prometheus"
    prometheus.io/port: "5000"
    prometheus.io/scrape: "true"
spec:
  type: NodePort
  selector:
    app: application-name
  ports:
    - protocol: TCP
      port: portPlaceholder
      targetPort: portPlaceholder

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: application-name-hpa
  namespace: namespace-name
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: application-name-deployment
  minReplicas: minReplicasPlaceholder
  maxReplicas: maxReplicasPlaceholder
  #targetCPUUtilizationPercentage: 90
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 40
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 50

===================================================== Liveness Probe:
* A liveness probe determines whether a container is running and healthy. If the liveness probe fails, Kubernetes restarts the container.
* It is used to ensure that the application is responsive and functioning correctly during its lifecycle.
Readiness Probe:
* A readiness probe determines whether a container is ready to handle traffic. If the readiness probe fails, the container is removed from the service's endpoints until it becomes ready again.
* It is used to avoid sending traffic to a container that is not yet ready to serve requests, preventing disruptions during application scaling or updates.
Startup Probe:
* A startup probe is used to determine when a container is ready to receive traffic. It differs from the readiness probe in that it only runs during the initial startup of a container.
* Once the startup probe succeeds, the readiness probe takes over to monitor ongoing readiness.
Persistent Volume Claim (PVC):
* A Persistent Volume Claim (PVC) is a request for storage by a user or a Pod. It is used to consume the storage defined by a Persistent Volume.
* PVCs are created by users (or automatically by controllers) to request a specific amount of storage with certain access modes (e.g., ReadWriteOnce, ReadOnlyMany, ReadWriteMany).
* When a PVC is created, it binds to an available PV that meets the requirements specified in the claim.
Persistent Volume (PV):
* A Persistent Volume (PV) is a piece of storage in the cluster that has been provisioned by an administrator or dynamically created using Storage Classes.
* PVs are resources in the cluster that represent physical or networked storage, such as a disk on a node or a network-attached storage device.
* They exist independently of any particular Pod and are provisioned and managed outside of the Pod lifecycle.
* PVs define access modes (e.g., ReadWriteOnce, ReadOnlyMany, ReadWriteMany) 
========================================================================
$ What is Kubernetes, and how does it differ from other orchestration tools like Docker Swarm?
Answer: Kubernetes is an open-source container orchestration platform designed to automate deploying, scaling, and operating application containers. Unlike Docker Swarm, which is simpler and tightly integrated with Docker, Kubernetes offers a more extensive ecosystem, supporting various container runtimes and providing advanced features like auto-scaling, self-healing, and more robust networking capabilities.

$ Explain the architecture of Kubernetes. What are the key components, and what roles do they play?
Answer: The Kubernetes architecture consists of a control plane and nodes. The control plane manages the cluster and includes components like the API Server, Scheduler, Controller Manager, and etcd (for configuration data storage). Nodes run the containerized applications and include components like the Kubelet (manages Pods), Kube-Proxy (manages network rules), and a container runtime (like Docker).

$ What is a Pod, and what are the differences between a Pod and a Container?
Answer: A Pod is the smallest deployable unit in Kubernetes, representing a single instance of a running process in the cluster. It can contain one or more containers that share the same network namespace and storage volumes. A container is an isolated execution environment; in contrast, a Pod provides a higher level of abstraction, grouping related containers that need to communicate or share resources.

$ What are ReplicaSets, and how do they differ from Deployments?
Answer: A ReplicaSet ensures a specified number of pod replicas are running at all times. Deployments manage ReplicaSets and provide a declarative way to update applications. While a ReplicaSet only ensures the desired state of Pods, a Deployment also enables versioning and rolling updates.

$ What is a StatefulSet, and when would you use it over a Deployment?
Answer: A StatefulSet is used for managing stateful applications that require persistent storage and stable network identifiers. It ensures that pods are created in order, with unique, stable identities. It’s ideal for applications like databases, where consistent storage and identity are crucial.

$ How does service discovery work in Kubernetes? What are ClusterIP, NodePort, and LoadBalancer types of services?
Answer: Service discovery in Kubernetes enables Pods to communicate with each other. A ClusterIP service exposes a service on a cluster-internal IP, accessible only within the cluster. NodePort exposes the service on a static port on each node's IP, allowing external traffic to access it. A LoadBalancer service creates an external load balancer in supported cloud providers, providing a single entry point to access the service.

$ What are Persistent Volumes (PVs) and Persistent Volume Claims (PVCs)? How do they relate to storage in Kubernetes?
Answer: Persistent Volumes (PVs) are storage resources in the cluster, defined by administrators, while Persistent Volume Claims (PVCs) are requests for those storage resources made by users. PVCs bind to PVs based on specified storage requirements, enabling dynamic storage provisioning.

$ Can you explain how Storage Classes work in Kubernetes? How would you configure dynamic provisioning of storage?
Answer: Storage Classes provide a way to define different types of storage, enabling dynamic provisioning of PVs based on user requirements. You configure a Storage Class with parameters (e.g., storage type, replication factor), and users can request PVCs that specify the desired Storage Class for automatic PV provisioning.

$What is ConfigMap and Secret in Kubernetes? How do you use them to manage application configurations?
Answer: ConfigMap is used to store non-sensitive configuration data as key-value pairs, while Secrets store sensitive information (like passwords) in an encoded format. You can reference both in Pods to inject configuration data or secrets as environment variables or volumes, promoting separation of concerns.

$ How can you manage environment variables for Pods in Kubernetes?
Answer: Environment variables can be defined directly in Pod specifications or injected from ConfigMaps or Secrets. This allows for flexible configuration management without hardcoding values in container images.

$ What are RBAC (Role-Based Access Control) and Network Policies? How do you implement them in Kubernetes?
Answer: RBAC is a method for controlling access to resources based on user roles, allowing administrators to define permissions for users and groups. You implement RBAC by creating Roles (permissions for resources) and RoleBindings (assigning roles to users/groups). Network Policies control Pod traffic through rules defined in YAML files that specify ingress and egress permissions.

$What are Custom Resource Definitions (CRDs), and how do they extend Kubernetes capabilities?
Answer: CRDs allow users to define their own resource types in Kubernetes, extending its API capabilities. They enable the creation of custom applications that can be managed just like native Kubernetes resources, promoting flexibility and extensibility.

$ What is the role of the Kubernetes API server, and how does it interact with other components?
Answer: The API server is the central management component of Kubernetes, serving as the primary interface for users and other components to interact with the cluster. It processes RESTful requests, validates them, and updates the etcd database. Other components (like controllers and schedulers) communicate through the API server to retrieve or modify cluster state.

$ Can you describe a challenging Kubernetes issue you faced in your previous role and how you resolved it?
Answer: One challenging issue involved a sudden increase in traffic causing Pods to become overloaded and crash. To resolve this, I analyzed resource limits and requests, adjusted the Horizontal Pod Autoscaler configuration, and implemented better monitoring to track resource usage. This ensured that the application could scale dynamically to meet demand
